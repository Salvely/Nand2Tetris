// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Replace this comment with your code.

    // fetch instruction
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegIn);
    
    // A register load signal
    Not(in=instruction[15], out=aInsSig);
    And(a=instruction[15], b=instruction[5], out=writeARegSig);
    Or(a=aInsSig, b=writeARegSig, out=loadAReg);

    ARegister(in=aRegIn, load=loadAReg, out=aRegOut, out[0..14]=addressM, out=newPC);

    // alu
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=amSelectorOut);
    And(a=instruction[4], b=instruction[15], out=load-d-register);
    DRegister(in=aluOut, load=load-d-register, out=dRegOut);
    ALU(x=dRegOut, y=amSelectorOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);

    // memory
    And(a=instruction[3], b=instruction[15], out=writeM);

    // load signals
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);
    And(a=notng, b=notzr, out=pos);
    And(a=instruction[2], b=ng, out=LT);
    And(a=instruction[1], b=zr, out=EQ);
    And(a=instruction[0], b=pos, out=GT);
    Or(a=LT, b=EQ, out=loadOut1);
    Or(a=loadOut1, b=GT, out=loadOut);
    And(a=instruction[15], b=loadOut, out=load, out=excludeLoad);
    // inc signals
    Not(in=excludeLoad, out=inc);

    // // inc signals
    // Or(a=instruction[0], b=instruction[1], out=incOut1);
    // Or(a=incOut1, b=instruction[2], out=incOut2);
    // Not(in=incOut2, out=incOut);
    // And(a=instruction[15], b=incOut, out=incCInstr);
    // Not(in=instruction[15], out=incAInstr);
    // Or(a=incAInstr, b=incCInstr, out=inc);

    // branch selection
    PC(in=newPC, load=load, inc=inc, reset=reset, out[0..14]=pc);
}