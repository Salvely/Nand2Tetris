// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static Array digit_arr; // Arrays that store the array representation of the number

    // Initializes the Math library.
    function void init() {
        var int val;
        var int i;

        let n = 16;
        let powersOfTwo = Array.new(n);
        let val = 1;
        let i = 0;
        while(i < (n-1)) {
            let powersOfTwo[i] = val;
            let val = val + val;
            let i = i + 1;
        }
        return;
    }
    
    // if the i-th bit of x == 1, returns true, otherwise, returns false
    function boolean bit(int x,int i) {
        if(powersOfTwo[i] & x > 0) {
            return true;
        }
        else {
            return false;
        }
    }

    // returns if the value is positive
    function boolean positive(int x) {
        if(x > 0) {
            return true;
        }
        return false;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int pos_x;
        var int pos_y;
        var boolean pos_result;
        var int shifted_x;
        var int sum;
        var int i;
        var int result;

        if(x = 0 | y = 0) {
            return 0;
        }

        let pos_x = Math.positive(x);
        let pos_y = Math.positive(y);
        
        if(~pos_x) {
            let x = Math.abs(x);
        }
        if(~pos_y) {
            let y = Math.abs(y);
        }

        let pos_result = ~((pos_x & (~pos_y))|(pos_y & (~pos_x)));

        let shifted_x = x;
        
        let sum = 0;
        
        let i = 0;

        while(i < (n - 1)) {
            if(Math.bit(y,i)) {
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let i = i + 1;
        }
        
        if(pos_result) {
            let result = sum;
        }
        else {
            let result = -sum;
        }
        return result;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int pos_x;
        var int pos_y;
        var boolean pos_result;
        var int result;
        var int q;     
        
        if((x < y) | (y < 0)) {
            return 0;
        }

        let pos_x = Math.positive(x);
        let pos_y = Math.positive(y);
        
        if(~pos_x) {
            let x = Math.abs(x);
        }
        if(~pos_y) {
            let y = Math.abs(y);
        }

        let pos_result = ~((pos_x & (~pos_y))|(pos_y & (~pos_x)));

        let q = Math.divide(x,2 * y);
        if(x - (2 * q * y)) {
            let result = 2 * q;
        }
        else {
            let result = (2 * q) + 1;
        }

        if(~pos_result) {
            let result = -result;
        }
        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int val;

        let y = 0;

        let j = (n / 2) - 1;
        
        while(j > 0 | j = 0) {
            let val = powersOfTwo[j];
            if(((y + val) * (y + val) > 0) & (((y + val)*(y + val) < x)|((y + val)*(y + val) = x))) {
                let y = y + powersOfTwo[j];
            }
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if(a > b | a = b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if(a < b | a = b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0) {
            return -x;
        }
        else {
            return x;
        }
    }
}
