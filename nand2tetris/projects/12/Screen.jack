// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array bitMap;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        var int val;

        let i = 0;
        let val = 1;
        let color = true;
        let bitMap = Array.new(16);

        while((i < 15)|(i = 15)) {
            let bitMap[i] = val;
            let val = val * 2;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int row;
        var int col;
        
        let row = 0;
        let col = 0;
        while(row < 512) {
            while(col < 256) {
                do Memory.poke(16384 + (row * 32) + (col / 16), 0);
                let col = col + 1;
            }
            let row = row + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int value;
        var int bit;
        
        let address = y * 32 + x / 16;
        let value = Memory.peek(16384 + address);
        let bit = x - ((x / 16) * 16);
        if(color) {
            let value = value | bitMap[bit];
        }
        else {
            let value = value & ~bitMap[bit];
        }
        do Memory.poke(address,value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        /**
        the algorithms as follows:
            b = current y - y1
            a = current x - x1
            if b / a > dy / dx: go right, a = a + 1
            if b / a < dy / dx: go left, b = b + 1
            let diff = a * dy - b * dx
            if diff < 0: go right, a = a + 1, diff = diff + dy
            if diff > 0: go left, b = b + 1, diff = diff - dx
        */
        var int a;
        var int b;
        var int diff;
        var int dx;
        var int dy;
        
        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        
        while(((a < dx)|(a = dx)) & ((b < dy) | (b = dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if(diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        // draw 2 vertical lines
        // (x1,y2) -> (x1,y1)
        do Screen.drawLine(x1,y2,x1,y1);
        // (x2,y2) -> (x2,y1)
        do Screen.drawLine(x2,y2,x2,y1);
        // draw 2 horizontal lines
        // (x1,y1) -> (x2,y1)
        do Screen.drawLine(x1,y1,x2,y1);
        // (x1,y2) -> (x2,y2)
        do Screen.drawLine(x1,y2,x2,y2);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int left_x;
        var int right_x;
        var int dx;

        let dy = -r;
        while((dy < r) | (dy = r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            let left_x = x - dx;
            let right_x = x + dx;
            do Screen.drawLine(left_x, y + dy, right_x, y + dy);
        }
        return;
    }
}
